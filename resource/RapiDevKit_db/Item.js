/**
 * 
 * 
  _____                      _              _ _ _     _   _     _        __ _ _      
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |     
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___ 
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|
 
 * DO NOT EDIT THIS FILE!! 
 * 
 *  TO CUSTOMIZE Item.js PLEASE EDIT ../custom/ItemCustom.js
 * 
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 * 
 */
const app = require('../../app.js');
const db_RapiDevKit_db = require('../../db/RapiDevKit_db_schema.js')
const properties = require('../../properties.js');
const handleError = require('../../security/util.js').handleError;
require('./custom/ItemCustom.js');

/*
 * SCHEMA DB Item
 * 
	{
		Active: {
			type: 'Boolean', 
			required : true
		},
		Created: {
			type: 'Integer'
		},
		Data: {
			type: 'String'
		},
		Modified: {
			type: 'Integer'
		},
		Order: {
			type: 'Integer'
		},
		Protected: {
			type: 'Boolean'
		},
		Status: {
			type: 'String'
		},
		//RELATIONS
		
		
		//EXTERNAL RELATIONS
		
		Creator: {
			type: Schema.ObjectId,
			ref : "Item"
		},
		Link: {
			type: Schema.ObjectId,
			ref : "Item"
		},
		Type: {
			type: Schema.ObjectId,
			required : true,
			ref : "Item"
		},
		
	}
 * 
 */



//CRUD METHODS


/**
 * ItemService.create
 *   @description CRUD ACTION create
 *
 */
app.post(properties.api + '/items', function (req, res) {
	obj = new db_RapiDevKit_db.Item(req.body);
	obj.save(function (err) {
		if (err) return handleError(err, res);
		res.send(obj);
	});
});

/**
 * ItemService.delete
 *   @description CRUD ACTION delete
 *   @param ObjectId id Id
 *
 */
app['delete'](properties.api + '/items/:id', function (req, res) {
	db_RapiDevKit_db.Item.findByIdAndRemove(req.params.id, function (err) {
		  if (err) return handleError(err, res);
		  res.send(err);
	});
});

/**
 * ItemService.findByActive
 *   @description CRUD ACTION findByActive
 *   @param Objectid key Id of the resource Active to search
 *
 */
app.get(properties.api + '/items/findByActive/:key', function (req, res) {

	db_RapiDevKit_db.Item.find({ 'Active' : req.params.key}).exec(function (err, list) {
		if (err) return handleError(err, res);
		res.send(list);
	});
	
});

/**
 * ItemService.findByCreated
 *   @description CRUD ACTION findByCreated
 *   @param Integer by start date
 *   @param Integer to end date
 *
 */
app.get(properties.api + '/items/findByCreated/:key', function (req, res) {

	db_RapiDevKit_db.Item.find({ 'Created' : req.params.key}).exec(function (err, list) {
		if (err) return handleError(err, res);
		res.send(list);
	});
	
});

/**
 * ItemService.findByCreator
 *   @description CRUD ACTION findByCreator
 *   @param Objectid key Id of the resource Creator to search
 *
 */
app.get(properties.api + '/items/findByCreator/:key', function (req, res) {

	db_RapiDevKit_db.Item.find({ 'Creator' : req.params.key}).exec(function (err, list) {
		if (err) return handleError(err, res);
		res.send(list);
	});
	
});

/**
 * ItemService.findByProtected
 *   @description CRUD ACTION findByProtected
 *   @param Objectid key Id of the resource Protected to search
 *
 */
app.get(properties.api + '/items/findByProtected/:key', function (req, res) {

	db_RapiDevKit_db.Item.find({ 'Protected' : req.params.key}).exec(function (err, list) {
		if (err) return handleError(err, res);
		res.send(list);
	});
	
});

/**
 * ItemService.findByType
 *   @description CRUD ACTION findByType
 *   @param Objectid key Id della risorsa Type da cercare
 *
 */
app.get(properties.api + '/items/findByType/:key', function (req, res) {

	db_RapiDevKit_db.Item.find({ 'Type' : req.params.key}).exec(function (err, list) {
		if (err) return handleError(err, res);
		res.send(list);
	});
	
});

/**
 * ItemService.get
 *   @description CRUD ACTION get
 *   @param ObjectId id Id 
 *
 */
app.get(properties.api + '/items/:id', function (req, res) {
	db_RapiDevKit_db.Item.findOne({_id:req.params.id}).exec(function (err, obj) {
		if (err) return handleError(err, res);
		res.send(obj);
	});
});

/**
 * ItemService.getLink
 *   @description CRUD ACTION getLink
 *   @param Objectid id ID of Item from Link
 *
 */
app.get(properties.api + '/items/:id/getLink', function (req, res) {

	db_RapiDevKit_db.Item.findOne({ _id : req.params.id})
	.populate("Link")
	.exec(function (err, obj) {
		if (err) return handleError(err, res);
		
		if(obj)
			res.send(obj.Link);
		else
			res.send();
	});
	
});

/**
 * ItemService.list
 *   @description CRUD ACTION list
 *
 */
app.get(properties.api + '/items', function (req, res) {
	db_RapiDevKit_db.Item.find().exec(function (err, list) {
		if (err) return handleError(err, res);
		res.send(list);
	});
});

/**
 * ItemService.update
 *   @description CRUD ACTION update
 *   @param ObjectId id Id
 *
 */
app.post(properties.api + '/items/:id', function (req, res) {
	db_RapiDevKit_db.Item.findByIdAndUpdate(req.params.id, req.body, {'new': true}, function (err, obj) {
		if (err) return handleError(err, res);
		res.send(obj);
	});
});


/*
 * CUSTOM SERVICES
 * 
 *	These services will be overwritten and implemented in  Custom.js
 */

